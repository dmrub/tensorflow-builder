name: Manual build and publish a container image

on:
  workflow_dispatch:
    inputs:
      baseImage:
        description: "Base image"
        required: true
        default: tensorflow/tensorflow:2.8.4-gpu
        type: choice
        options:
          - tensorflow/tensorflow:2.2.0-gpu
          - tensorflow/tensorflow:2.2.1-gpu
          - tensorflow/tensorflow:2.2.3-gpu
          - tensorflow/tensorflow:2.3.4-gpu
          - tensorflow/tensorflow:2.4.3-gpu
          - tensorflow/tensorflow:2.4.3-gpu
          - tensorflow/tensorflow:2.8.4-gpu
env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}
  BASE_IMAGE: ${{ inputs.baseImage }}

jobs:
  map_inputs:
    runs-on: ubuntu-latest
    outputs:
      srcRepo: "${{ steps.step1.outputs.SRC_REPO }}"
      baseImageTag: "${{ steps.step1.outputs.BASE_IMAGE_TAG }}"
      baseImageName: "${{ steps.step1.outputs.BASE_IMAGE_NAME }}"
      baseImageVersion: "${{ steps.step1.outputs.BASE_IMAGE_VERSION }}"
      imageName: "${{ steps.step1.outputs.IMAGE_NAME }}"
      imageTag: "${{ steps.step1.outputs.IMAGE_TAG }}"
    steps:
      - id: step1
        run: |
          BASE_IMAGE_TAG=${BASE_IMAGE#*:};
          BASE_IMAGE_NAME=${BASE_IMAGE%%:*};
          BASE_IMAGE_VERSION=${BASE_IMAGE_TAG%%-*};
          case "$BASE_IMAGE_NAME" in
            tensorflow/tensorflow)
               SRC_REPO=tensorflow/tensorflow;
               IMAGE_NAME=$GITHUB_REPOSITORY_OWNER/tensorflow;
               ;;
            *) 
               echo >&2 "Error: unknown base image: $BASE_IMAGE_NAME"; 
               exit 1;
               ;;
          esac;
          IMAGE_TAG=$BASE_IMAGE_TAG;
          printf "SRC_REPO=%q\n" "$SRC_REPO"                     >> $GITHUB_OUTPUT;
          printf "BASE_IMAGE_TAG=%q\n" "$BASE_IMAGE_TAG"         >> $GITHUB_OUTPUT;
          printf "BASE_IMAGE_NAME=%q\n" "$BASE_IMAGE_NAME"       >> $GITHUB_OUTPUT;
          printf "BASE_IMAGE_VERSION=%q\n" "$BASE_IMAGE_VERSION" >> $GITHUB_OUTPUT;
          printf "IMAGE_NAME=%q\n" "$IMAGE_NAME"                 >> $GITHUB_OUTPUT;
          printf "IMAGE_TAG=%q\n" "$IMAGE_TAG"                   >> $GITHUB_OUTPUT;
          echo "### \`map_inputs\`"                     >> $GITHUB_STEP_SUMMARY;
          echo "SRC_REPO=$SRC_REPO"                     >> $GITHUB_STEP_SUMMARY;
          echo "BASE_IMAGE=$BASE_IMAGE"                 >> $GITHUB_STEP_SUMMARY;
          echo "BASE_IMAGE_TAG=$BASE_IMAGE_TAG"         >> $GITHUB_STEP_SUMMARY;
          echo "BASE_IMAGE_NAME=$BASE_IMAGE_NAME"       >> $GITHUB_STEP_SUMMARY;
          echo "BASE_IMAGE_VERSION=$BASE_IMAGE_VERSION" >> $GITHUB_STEP_SUMMARY;
          echo "IMAGE_NAME=$IMAGE_NAME"                 >> $GITHUB_STEP_SUMMARY;
          echo "IMAGE_TAG=$IMAGE_TAG"                   >> $GITHUB_STEP_SUMMARY;
          echo ""                                       >> $GITHUB_STEP_SUMMARY;

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: map_inputs
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ needs.map_inputs.outputs.srcRepo }}
          ref: "v${{ needs.map_inputs.outputs.baseImageVersion }}"

      - name: Patch
        # working-directory: tensorflow
        run: |
          pwd;
          ls -lah;
          git fetch --all;
          git rev-parse HEAD;
          git log -n1;
          #git log --all --grep='Fix crash during shutdown in distributed training';
          git config --global user.email "dmitri.rubinstein@dfki.de";
          git config --global user.name "Dmitri Rubinstein";
          git cherry-pick b93075e9bef306d5605b73137a88c7739c84e912;

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ needs.map_inputs.outputs.imageName }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: tensorflow/tools/dockerfiles
          file: "tensorflow/tools/dockerfiles/dockerfiles/gpu.Dockerfile"
          push: true
          tags: ${{ env.REGISTRY }}/${{ needs.map_inputs.outputs.imageName }}:${{ needs.map_inputs.outputs.imageTag }}
          labels: ${{ steps.meta.outputs.labels }}
          #build-args: |
          #  BASE_IMAGE=${{ env.BASE_IMAGE }}
